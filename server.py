import json
import base64
import cv2
import numpy as np
import logging
from datetime import datetime, timezone
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import config
from face_recognition import FaceRecognitionSystem

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI(title="Face Recognition API")

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t v·ªõi model Facenet
try:
    face_system = FaceRecognitionSystem(model_name="Facenet", threshold=0.6)
    logger.info("‚úÖ Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t th√†nh c√¥ng")
except Exception as e:
    logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t: {e}")
    raise

# Kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB
try:
    client = AsyncIOMotorClient(config.MONGO_URI)
    db = client["IoT"]
    faces_collection = db["face_embeddings"]
    logger.info("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng")
except Exception as e:
    logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")
    raise

@app.get("/health")
async def health_check():
    """Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng."""
    try:
        await db.command("ping")
        return {
            "status": "healthy",
            "database": "connected",
            "face_system": "running",
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        raise HTTPException(status_code=503, detail="H·ªá th·ªëng kh√¥ng kh·∫£ d·ª•ng")

def validate_image(image_data: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu ·∫£nh."""
    if not image_data:
        return False
    try:
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng base64
        base64.b64decode(image_data)
        return True
    except Exception:
        return False

def decode_image(image_data: str) -> np.ndarray:
    """Gi·∫£i m√£ d·ªØ li·ªáu ·∫£nh t·ª´ base64 sang numpy array."""
    try:
        img = base64.b64decode(image_data)
        np_arr = np.frombuffer(img, np.uint8)
        return cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    except Exception as e:
        logger.error(f"‚ùå L·ªói gi·∫£i m√£ ·∫£nh: {e}")
        return None

async def handle_add_face(websocket: WebSocket, data: dict, image: np.ndarray):
    """X·ª≠ l√Ω y√™u c·∫ßu ƒëƒÉng k√Ω khu√¥n m·∫∑t."""
    try:
        user_id = data.get("userID")
        if not user_id:
            raise ValueError("Thi·∫øu userID")

        # Ki·ªÉm tra xem userID ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_face = await faces_collection.find_one({"userID": user_id})
        if existing_face:
            raise ValueError("UserID ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")

        embedding = face_system.get_embedding(image)
        if embedding is None:
            raise ValueError("Kh√¥ng th·ªÉ t·∫°o embedding t·ª´ khu√¥n m·∫∑t")

        # T·∫°o document v·ªõi timestamp
        face_document = {
            "userID": user_id,
            "embeddings": embedding,
            "created_at": datetime.now(timezone.utc),
            "updated_at": datetime.now(timezone.utc)
        }

        await faces_collection.insert_one(face_document)
        
        await websocket.send_text(json.dumps({
            "status": "success",
            "message": "ƒêƒÉng k√Ω khu√¥n m·∫∑t th√†nh c√¥ng",
            "timestamp": datetime.now(timezone.utc).isoformat()
        }))

    except ValueError as e:
        await websocket.send_text(json.dumps({
            "status": "fail",
            "message": str(e)
        }))
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω khu√¥n m·∫∑t: {e}")
        await websocket.send_text(json.dumps({
            "status": "fail",
            "message": "ƒêƒÉng k√Ω khu√¥n m·∫∑t th·∫•t b·∫°i"
        }))

async def handle_recognize_face(websocket: WebSocket, data: dict, image: np.ndarray):
    """X·ª≠ l√Ω y√™u c·∫ßu nh·∫≠n di·ªán khu√¥n m·∫∑t."""
    try:
        user_id = data.get("userID")
        if not user_id:
            raise ValueError("Thi·∫øu userID")

        new_embedding = face_system.get_embedding(image)
        if new_embedding is None:
            raise ValueError("Kh√¥ng th·ªÉ t·∫°o embedding t·ª´ khu√¥n m·∫∑t")

        stored_face = await faces_collection.find_one({
            "userID": user_id,
            "embeddings": {"$exists": True}
        })

        if not stored_face:
            raise ValueError("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω")

        if face_system.compare_faces(stored_face["embeddings"], new_embedding):
            # C·∫≠p nh·∫≠t th·ªùi gian nh·∫≠n d·∫°ng g·∫ßn nh·∫•t
            await faces_collection.update_one(
                {"userID": user_id},
                {"$set": {"last_recognized_at": datetime.now(timezone.utc)}}
            )
            
            await websocket.send_text(json.dumps({
                "status": "success",
                "message": f"Nh·∫≠n d·∫°ng khu√¥n m·∫∑t th√†nh c√¥ng: {user_id}",
                "timestamp": datetime.now(timezone.utc).isoformat()
            }))
        else:
            raise ValueError("Khu√¥n m·∫∑t kh√¥ng kh·ªõp")

    except ValueError as e:
        await websocket.send_text(json.dumps({
            "status": "fail",
            "message": str(e)
        }))
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh nh·∫≠n d·∫°ng khu√¥n m·∫∑t: {e}")
        await websocket.send_text(json.dumps({
            "status": "fail",
            "message": "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t th·∫•t b·∫°i"
        }))

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """X·ª≠ l√Ω k·∫øt n·ªëi v√† tin nh·∫Øn WebSocket."""
    await websocket.accept()
    logger.info(f"üîó K·∫øt n·ªëi WebSocket m·ªõi t·ª´: {websocket.client}")

    try:
        while True:
            message = await websocket.receive_text()
            data = json.loads(message)

            # Ki·ªÉm tra lo·∫°i y√™u c·∫ßu
            if "type" not in data:
                await websocket.send_text(json.dumps({
                    "status": "fail",
                    "message": "Thi·∫øu lo·∫°i y√™u c·∫ßu"
                }))
                continue

            # Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu ·∫£nh
            image_data = data.get("image")
            if not validate_image(image_data):
                await websocket.send_text(json.dumps({
                    "status": "fail",
                    "message": "D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu"
                }))
                continue

            image = decode_image(image_data)
            if image is None:
                await websocket.send_text(json.dumps({
                    "status": "fail",
                    "message": "Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh"
                }))
                continue

            if data["type"] == "addFace":
                await handle_add_face(websocket, data, image)
            elif data["type"] == "recognizeFace":
                await handle_recognize_face(websocket, data, image)
            else:
                await websocket.send_text(json.dumps({
                    "status": "fail",
                    "message": "Lo·∫°i y√™u c·∫ßu kh√¥ng h·ª£p l·ªá"
                }))

    except WebSocketDisconnect:
        logger.info(f"üîå ƒê√≥ng k·∫øt n·ªëi t·ª´: {websocket.client}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        logger.info(f"üîå ƒê√≥ng k·∫øt n·ªëi t·ª´: {websocket.client}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)