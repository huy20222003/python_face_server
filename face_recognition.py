import numpy as np
import logging
import os
import tensorflow as tf
from typing import Optional
from deepface import DeepFace
import cv2

class FaceRecognitionSystem:
    def __init__(self, model_name: str = "Facenet", threshold: float = 0.5):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
        Args:
            model_name: T√™n m√¥ h√¨nh (m·∫∑c ƒë·ªãnh: Facenet)
            threshold: Ng∆∞·ª°ng nh·∫≠n di·ªán (m·∫∑c ƒë·ªãnh: 0.5)
        """
        self.threshold = threshold
        self.model_name = model_name
        self._setup_logging()
    
    def _setup_logging(self) -> None:
        """C·∫•u h√¨nh logging."""
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
        self.logger = logging.getLogger(__name__)

    def _preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o."""
        try:
            if image.shape[2] == 3:
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            return cv2.resize(image, (160, 160))
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            return None
    
    def get_embedding(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Tr√≠ch xu·∫•t embedding t·ª´ ·∫£nh khu√¥n m·∫∑t."""
        preprocessed_image = self._preprocess_image(image)
        if preprocessed_image is None:
            return None
        
        temp_path = 'temp_face.jpg'
        try:
            # Save the preprocessed image temporarily
            cv2.imwrite(temp_path, preprocessed_image)
            
            try:
                embedding = DeepFace.represent(
                    img_path=temp_path,
                    model_name=self.model_name,
                    enforce_detection=False,
                    detector_backend='opencv'
                )
                return np.array(embedding[0]['embedding']) if embedding else None
            
            except ValueError as ve:
                if "Invalid model_name" in str(ve):
                    self.logger.error(f"‚ùå Model name '{self.model_name}' kh√¥ng h·ª£p l·ªá. H√£y s·ª≠ d·ª•ng t√™n m√¥ h√¨nh kh·∫£ d·ª•ng nh∆∞ 'Facenet', 'VGG-Face', v.v.")
                    # Fallback to default model if possible
                    if self.model_name != "Facenet":
                        self.logger.info("üîÑ Th·ª≠ l·∫°i v·ªõi m√¥ h√¨nh m·∫∑c ƒë·ªãnh 'Facenet'")
                        self.model_name = "Facenet"
                        return self.get_embedding(image)
                else:
                    self.logger.error(f"‚ùå L·ªói gi√° tr·ªã: {ve}")
                return None
            
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói tr√≠ch xu·∫•t embedding: {e}")
                return None
            
        finally:
            # Clean up regardless of success or failure
            if os.path.exists(temp_path):
                os.remove(temp_path)
    
    def compare_faces(self, embedding1: Optional[np.ndarray], embedding2: Optional[np.ndarray]) -> bool:
        """So s√°nh hai embeddings ƒë·ªÉ x√°c th·ª±c khu√¥n m·∫∑t."""
        try:
            if embedding1 is None or embedding2 is None:
                return False
            similarity = np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))
            return similarity > self.threshold
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói so s√°nh khu√¥n m·∫∑t: {e}")
            return False