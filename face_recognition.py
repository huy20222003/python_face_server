import numpy as np
import logging
from typing import Optional, List
from deepface import DeepFace
import cv2

class FaceRecognitionSystem:
    def __init__(self, model_name: str = "ArcFace", threshold: float = 0.5):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
        Args:
            model_name: T√™n m√¥ h√¨nh (m·∫∑c ƒë·ªãnh: ArcFace)
            threshold: Ng∆∞·ª°ng nh·∫≠n di·ªán (m·∫∑c ƒë·ªãnh: 0.5)
        """
        self.threshold = threshold
        self.model_name = model_name
        self.model = None  # Lazy Loading
        self._setup_logging()
    
    def _setup_logging(self) -> None:
        """C·∫•u h√¨nh logging."""
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
        self.logger = logging.getLogger(__name__)
    
    def _load_model(self) -> None:
        """T·∫£i model ch·ªâ khi c·∫ßn thi·∫øt (Lazy Loading)."""
        if self.model is None:
            try:
                self.logger.info(f"üîÑ ƒêang t·∫£i m√¥ h√¨nh {self.model_name}...")
                self.model = DeepFace.build_model(self.model_name)
                self.logger.info(f"‚úÖ {self.model_name} ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng")
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói t·∫£i m√¥ h√¨nh: {e}")
                raise
    
    def _preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o."""
        try:
            if image.shape[2] == 3:
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            return cv2.resize(image, (160, 160)).astype(np.float32)  # Resize nh·ªè h∆°n ƒë·ªÉ ti·∫øt ki·ªám RAM
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            return None
    
    def get_embedding(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Tr√≠ch xu·∫•t embedding t·ª´ ·∫£nh khu√¥n m·∫∑t."""
        self._load_model()
        preprocessed_image = self._preprocess_image(image)
        if preprocessed_image is None:
            return None
        try:
            embedding = DeepFace.represent(
                img_path=preprocessed_image,
                model_name=self.model_name,
                enforce_detection=False,
                detector_backend='opencv'
            )
            return np.array(embedding[0]['embedding']) if embedding else None
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói tr√≠ch xu·∫•t embedding: {e}")
            return None
    
    def compare_faces(self, embedding1: Optional[np.ndarray], embedding2: Optional[np.ndarray]) -> bool:
        """So s√°nh hai embeddings ƒë·ªÉ x√°c th·ª±c khu√¥n m·∫∑t."""
        try:
            if embedding1 is None or embedding2 is None:
                return False
            similarity = np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))
            return similarity > self.threshold
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói so s√°nh khu√¥n m·∫∑t: {e}")
            return False
