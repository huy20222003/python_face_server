import numpy as np
import logging
import os
import tensorflow as tf
from typing import Optional
import cv2
from deepface.DeepFace import build_model

class FaceRecognitionSystem:
    def __init__(self, model_path: str = "models/facenet_model.h5", threshold: float = 0.5):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t.
        Args:
            model_path: ƒê∆∞·ªùng d·∫´n l∆∞u m√¥ h√¨nh c·ª•c b·ªô.
            threshold: Ng∆∞·ª°ng nh·∫≠n di·ªán.
        """
        self.threshold = threshold
        self.model_path = model_path
        self._setup_logging()
        self._load_model()

    def _setup_logging(self) -> None:
        """C·∫•u h√¨nh logging."""
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
        self.logger = logging.getLogger(__name__)

    def _load_model(self) -> None:
        """T·∫£i m√¥ h√¨nh Facenet m·ªôt l·∫ßn duy nh·∫•t."""
        if not os.path.exists(self.model_path):
            self.logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh t·∫°i {self.model_path}. Vui l√≤ng t·∫£i m√¥ h√¨nh tr∆∞·ªõc khi deploy.")
            raise FileNotFoundError("M√¥ h√¨nh kh√¥ng t·ªìn t·∫°i!")
        try:
            self.logger.info("üîÑ ƒêang t·∫£i m√¥ h√¨nh v√†o b·ªô nh·ªõ...")
            self.model = build_model("Facenet")
            self.model.load_weights(self.model_path)
            self.logger.info("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói t·∫£i m√¥ h√¨nh: {e}")
            raise

    def _preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o."""
        try:
            if image.shape[2] == 3:
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            return cv2.resize(image, (160, 160))
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            return None
    
    def get_embedding(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Tr√≠ch xu·∫•t embedding t·ª´ ·∫£nh khu√¥n m·∫∑t s·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ t·∫£i."""
        preprocessed_image = self._preprocess_image(image)
        if preprocessed_image is None:
            return None

        temp_path = 'temp_face.jpg'
        try:
            cv2.imwrite(temp_path, preprocessed_image)
            embedding = build_model("Facenet").predict(np.expand_dims(preprocessed_image, axis=0))[0]
            return embedding
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói tr√≠ch xu·∫•t embedding: {e}")
            return None
        finally:
            if os.path.exists(temp_path):
                os.remove(temp_path)
    
    def compare_faces(self, embedding1: Optional[np.ndarray], embedding2: Optional[np.ndarray]) -> bool:
        """So s√°nh hai embeddings ƒë·ªÉ x√°c th·ª±c khu√¥n m·∫∑t."""
        try:
            if embedding1 is None or embedding2 is None:
                return False
            similarity = np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))
            return similarity > self.threshold
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói so s√°nh khu√¥n m·∫∑t: {e}")
            return False
