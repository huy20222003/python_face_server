import numpy as np
import logging
import os
import tensorflow as tf
from typing import Optional
from deepface import DeepFace
import cv2
import gdown  # Th√™m th∆∞ vi·ªán ƒë·ªÉ t·∫£i file t·ª´ Google Drive

class FaceRecognitionSystem:
    def __init__(self, model_name: str = "FaceNet", threshold: float = 0.5, model_path: str = "models/facenet_keras.h5"):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
        Args:
            model_name: T√™n m√¥ h√¨nh (m·∫∑c ƒë·ªãnh: FaceNet)
            threshold: Ng∆∞·ª°ng nh·∫≠n di·ªán (m·∫∑c ƒë·ªãnh: 0.5)
            model_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh ƒë√£ l∆∞u
        """
        self.threshold = threshold
        self.model_name = model_name
        self.model_path = model_path
        self.model_url = "https://drive.google.com/file/d/1PZ_6Zsy1Vb0s0JmjEmVd8FS99zoMCiN1/view?usp=sharing"  # C·∫≠p nh·∫≠t Google Drive ID
        self.model = None  # Lazy Loading
        self._setup_logging()
    
    def _setup_logging(self) -> None:
        """C·∫•u h√¨nh logging."""
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
        self.logger = logging.getLogger(__name__)

    def _download_model(self) -> None:
        """T·∫£i m√¥ h√¨nh t·ª´ Google Drive n·∫øu ch∆∞a c√≥."""
        if not os.path.exists(self.model_path):
            os.makedirs(os.path.dirname(self.model_path), exist_ok=True)
            self.logger.info("üì• ƒêang t·∫£i m√¥ h√¨nh t·ª´ Google Drive (ƒë·ªìng b·ªô)...")
            try:
                # S·ª≠ d·ª•ng fuzzy=True ƒë·ªÉ x·ª≠ l√Ω link chia s·∫ª c·ªßa Google Drive
                gdown.download(url=self.model_url, output=self.model_path, quiet=False, fuzzy=True)
                self.logger.info("‚úÖ Model ƒë√£ t·∫£i th√†nh c√¥ng!")
                
                # (T√πy ch·ªçn) Ki·ªÉm tra k√≠ch th∆∞·ªõc file ho·∫∑c tr·∫°ng th√°i file sau khi t·∫£i v·ªÅ
                if os.path.getsize(self.model_path) < 100 * 1024 * 1024:
                    self.logger.warning("‚ö†Ô∏è K√≠ch th∆∞·ªõc file t·∫£i v·ªÅ c√≥ v·∫ª kh√¥ng ƒë√∫ng, vui l√≤ng ki·ªÉm tra l·∫°i.")
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói t·∫£i model: {e}")
                raise

    def _load_model(self) -> None:
        """Load m√¥ h√¨nh t·ª´ file, n·∫øu ch∆∞a c√≥ th√¨ t·∫£i tr∆∞·ªõc r·ªìi load."""
        if self.model is None:
            try:
                if not os.path.exists(self.model_path):
                    self.logger.info(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {self.model_path}, ƒëang t·∫£i model...")
                    self._download_model()
                
                self.logger.info(f"üîÑ ƒêang t·∫£i m√¥ h√¨nh t·ª´ {self.model_path}...")
                # Ch·ªù m·ªôt ch√∫t n·∫øu c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o file ƒë√£ ho√†n to√†n ghi xong (tr∆∞·ªùng h·ª£p h·ªá th·ªëng file ch·∫≠m)
                while not os.path.exists(self.model_path):
                    pass

                self.model = tf.keras.models.load_model(self.model_path)
                self.logger.info(f"‚úÖ M√¥ h√¨nh {self.model_name} ƒë√£ t·∫£i xong")
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói t·∫£i m√¥ h√¨nh: {e}")
                raise
    
    def _preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o."""
        try:
            if image.shape[2] == 3:
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            return cv2.resize(image, (160, 160)).astype(np.float32)  # Resize nh·ªè h∆°n ƒë·ªÉ ti·∫øt ki·ªám RAM
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            return None
    
    def get_embedding(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Tr√≠ch xu·∫•t embedding t·ª´ ·∫£nh khu√¥n m·∫∑t."""
        self._load_model()
        preprocessed_image = self._preprocess_image(image)
        if preprocessed_image is None:
            return None
        try:
            embedding = DeepFace.represent(
                img_path=preprocessed_image,
                model_name=self.model_name,
                enforce_detection=False,
                detector_backend='opencv'
            )
            return np.array(embedding[0]['embedding']) if embedding else None
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói tr√≠ch xu·∫•t embedding: {e}")
            return None
    
    def compare_faces(self, embedding1: Optional[np.ndarray], embedding2: Optional[np.ndarray]) -> bool:
        """So s√°nh hai embeddings ƒë·ªÉ x√°c th·ª±c khu√¥n m·∫∑t."""
        try:
            if embedding1 is None or embedding2 is None:
                return False
            similarity = np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))
            return similarity > self.threshold
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói so s√°nh khu√¥n m·∫∑t: {e}")
            return False
