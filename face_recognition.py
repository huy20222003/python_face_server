import numpy as np
import logging
import os
import tensorflow as tf
import cv2
from typing import Optional

class FaceRecognitionSystem:
    def __init__(self, model_path: str = "models/arcface_weights.tflite", threshold: float = 0.5):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t s·ª≠ d·ª•ng m√¥ h√¨nh TF Lite.
        Args:
            model_path: ƒê∆∞·ªùng d·∫´n l∆∞u m√¥ h√¨nh TF Lite.
            threshold: Ng∆∞·ª°ng nh·∫≠n di·ªán.
        """
        self.threshold = threshold
        self.model_path = model_path
        self.model = None  # B·ªô nh·ªõ ƒë·ªám cho m√¥ h√¨nh TF Lite
        self._setup_logging()

    def _setup_logging(self) -> None:
        """C·∫•u h√¨nh logging."""
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
        self.logger = logging.getLogger(__name__)

    def _load_model(self) -> None:
        """T·∫£i m√¥ h√¨nh TF Lite v√†o b·ªô nh·ªõ n·∫øu ch∆∞a ƒë∆∞·ª£c t·∫£i."""
        if self.model is None:
            if not os.path.exists(self.model_path):
                self.logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh t·∫°i {self.model_path}.")
                raise FileNotFoundError("M√¥ h√¨nh kh√¥ng t·ªìn t·∫°i!")
            try:
                self.logger.info("üîÑ ƒêang t·∫£i m√¥ h√¨nh TensorFlow Lite v√†o b·ªô nh·ªõ...")
                interpreter = tf.lite.Interpreter(model_path=self.model_path)
                interpreter.allocate_tensors()
                self.model = interpreter
                self.logger.info("‚úÖ M√¥ h√¨nh TensorFlow Lite ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói t·∫£i m√¥ h√¨nh: {e}")
                raise

    def _preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o:
           - N·∫øu ·∫£nh c√≥ 3 k√™nh (BGR) chuy·ªÉn sang RGB.
           - Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc (112, 112).
        """
        try:
            if image.shape[2] == 3:
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            return cv2.resize(image, (112, 112))
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            return None

    def get_embedding(self, image: np.ndarray) -> Optional[np.ndarray]:
        """
        Tr√≠ch xu·∫•t embedding t·ª´ ·∫£nh khu√¥n m·∫∑t s·ª≠ d·ª•ng m√¥ h√¨nh TF Lite.
        Args:
            image: ·∫¢nh khu√¥n m·∫∑t ƒë·∫ßu v√†o d∆∞·ªõi d·∫°ng numpy.ndarray.
        Returns:
            Embedding vector n·∫øu th√†nh c√¥ng, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
        """
        # T·∫£i m√¥ h√¨nh n·∫øu ch∆∞a ƒë∆∞·ª£c t·∫£i
        self._load_model()

        preprocessed_image = self._preprocess_image(image)
        if preprocessed_image is None:
            return None

        try:
            # L·∫•y th√¥ng tin input v√† output t·ª´ m√¥ h√¨nh TF Lite
            input_details = self.model.get_input_details()
            output_details = self.model.get_output_details()

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o: m·ªü r·ªông chi·ªÅu v√† chuy·ªÉn v·ªÅ ki·ªÉu float32
            input_data = np.expand_dims(preprocessed_image, axis=0).astype(np.float32)

            # ƒê∆∞a d·ªØ li·ªáu v√†o m√¥ h√¨nh v√† ch·∫°y inference
            self.model.set_tensor(input_details[0]['index'], input_data)
            self.model.invoke()

            # L·∫•y k·∫øt qu·∫£ embedding
            embedding = self.model.get_tensor(output_details[0]['index'])[0]
            return embedding
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói tr√≠ch xu·∫•t embedding: {e}")
            return None

    def compare_faces(self, embedding1: Optional[np.ndarray], embedding2: Optional[np.ndarray]) -> bool:
        """
        So s√°nh hai embeddings ƒë·ªÉ x√°c th·ª±c khu√¥n m·∫∑t.
        Args:
            embedding1: Embedding c·ªßa khu√¥n m·∫∑t th·ª© nh·∫•t.
            embedding2: Embedding c·ªßa khu√¥n m·∫∑t th·ª© hai.
        Returns:
            True n·∫øu similarity v∆∞·ª£t ng∆∞·ª°ng, ng∆∞·ª£c l·∫°i False.
        """
        try:
            if embedding1 is None or embedding2 is None:
                return False
            similarity = np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))
            return similarity > self.threshold
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói so s√°nh khu√¥n m·∫∑t: {e}")
            return False
