import numpy as np
import logging
import cv2
from typing import Optional, List
from mtcnn import MTCNN
from keras_facenet import FaceNet

def euclidean_distance(embedding1: np.ndarray, embedding2: np.ndarray) -> float:
    """T√≠nh kho·∫£ng c√°ch Euclidean gi·ªØa hai embeddings."""
    return np.linalg.norm(embedding1 - embedding2)

class FaceRecognitionSystem:
    def __init__(self, threshold: float = 0.8):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t s·ª≠ d·ª•ng FaceNet.
        Args:
            threshold: Ng∆∞·ª°ng nh·∫≠n di·ªán (Euclidean distance).
        """
        self.threshold = threshold
        self._setup_logging()
        self.logger.info("üîÑ ƒêang t·∫£i m√¥ h√¨nh FaceNet...")
        self.facenet = FaceNet()
        self.logger.info("‚úÖ M√¥ h√¨nh FaceNet ƒë√£ t·∫£i th√†nh c√¥ng.")
        self.face_detector = MTCNN()

    def _setup_logging(self) -> None:
        """C·∫•u h√¨nh logging."""
        logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
        self.logger = logging.getLogger(__name__)

    def _detect_faces(self, image: np.ndarray) -> List[np.ndarray]:
        """Ph√°t hi·ªán khu√¥n m·∫∑t trong ·∫£nh v√† tr√≠ch xu·∫•t v√πng m·∫∑t."""
        faces = []
        try:
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            detections = self.face_detector.detect_faces(image_rgb)
            for detection in detections:
                x, y, width, height = detection['box']
                x, y = max(0, x), max(0, y)
                face_img = image_rgb[y:y + height, x:x + width]
                faces.append(face_img)
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói ph√°t hi·ªán khu√¥n m·∫∑t: {e}")
        return faces

    def _preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·∫ßu v√†o c·ªßa FaceNet."""
        try:
            image = cv2.resize(image, (160, 160))
            image = image.astype(np.float32) / 255.0
            return np.expand_dims(image, axis=0)
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            return None

    def get_embeddings(self, image: np.ndarray) -> Optional[List[np.ndarray]]:
        """Tr√≠ch xu·∫•t embedding t·ª´ ·∫£nh ch·ª©a khu√¥n m·∫∑t."""
        face_images = self._detect_faces(image)
        if not face_images:
            self.logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t n√†o trong ·∫£nh.")
            return None

        embeddings = []
        for face_image in face_images:
            preprocessed_image = self._preprocess_image(face_image)
            if preprocessed_image is None:
                continue
            try:
                embedding = self.facenet.embeddings(preprocessed_image)[0]
                embeddings.append(embedding)  # Kh√¥ng chu·∫©n h√≥a
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói tr√≠ch xu·∫•t embedding: {e}")
                continue

        return embeddings if embeddings else None

    def recognize_face(self, face_embedding: np.ndarray, database: List[dict]) -> Optional[dict]:
        """
        So s√°nh embedding v·ªõi c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ t√¨m khu√¥n m·∫∑t ph√π h·ª£p nh·∫•t.
        Args:
            face_embedding: Embedding c·ªßa khu√¥n m·∫∑t c·∫ßn nh·∫≠n di·ªán.
            database: Danh s√°ch c√°c khu√¥n m·∫∑t ƒë√£ l∆∞u trong MongoDB.
        Returns:
            Th√¥ng tin c·ªßa khu√¥n m·∫∑t nh·∫≠n di·ªán ƒë∆∞·ª£c (n·∫øu c√≥) ho·∫∑c None.
        """
        best_match = None
        min_distance = float("inf")
        for face in database:
            stored_embedding = np.array(face["embedding"], dtype=np.float32)
            distance = euclidean_distance(face_embedding, stored_embedding)
            if distance < self.threshold and distance < min_distance:
                min_distance = distance
                best_match = face
        return best_match
